import React, { useState } from "react";
import { StyleSheet, Text, View, ScrollView, TextInput, Alert } from "react-native";
import { useRouter } from "expo-router";
import AppHeader from "@/components/common/AppHeader";
import PrimaryButton from "@/components/common/PrimaryButton";
import { COLORS } from "@/constants/colors";
import { generateFarmingPlan } from "@/services/geminiApi";
import * as FileSystem from "expo-file-system";
import * as Sharing from "expo-sharing";

interface LivestockFormData {
  farmSize: string;
  location: string;
  livestockType: string;
  animalCount: string;
  housingType: string;
  feedSource: string;
  budget: string;
  experience: string;
  waterSource: string;
  veterinaryAccess: string;
  marketAccess: string;
  breedingPlan: string;
  currentAnimals: string;
  landAvailable: string;
  goals: string;
}

export default function LivestockPlanning() {
  const router = useRouter();
  const [formData, setFormData] = useState<LivestockFormData>({
    farmSize: "",
    location: "",
    livestockType: "",
    animalCount: "",
    housingType: "",
    feedSource: "",
    budget: "",
    experience: "",
    waterSource: "",
    veterinaryAccess: "",
    marketAccess: "",
    breedingPlan: "",
    currentAnimals: "",
    landAvailable: "",
    goals: "",
  });
  const [loading, setLoading] = useState(false);
  const [aiResponse, setAiResponse] = useState<string>("");

  const handleInputChange = (field: keyof LivestockFormData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleSubmit = async () => {
    // Validate required fields
    const requiredFields = ['farmSize', 'location', 'livestockType', 'animalCount', 'budget'];
    const missingFields = requiredFields.filter(field => !formData[field as keyof LivestockFormData]);
    
    if (missingFields.length > 0) {
      Alert.alert("Missing Information", "Please fill in all required fields marked with *");
      return;
    }

    setLoading(true);
    try {
      const response = await generateFarmingPlan("livestock", formData);
      setAiResponse(response);
    } catch (error) {
      console.error("Error generating plan:", error);
      Alert.alert("Error", "Failed to generate livestock plan. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  const downloadPlan = async () => {
    if (!aiResponse) return;

    try {
      const fileName = `livestock_plan_${new Date().toISOString().split('T')[0]}.txt`;
      const fileUri = FileSystem.documentDirectory + fileName;
      
      const content = `LIVESTOCK FARMING PLAN
Generated on: ${new Date().toLocaleDateString()}

FARM DETAILS:
- Farm Size: ${formData.farmSize}
- Location: ${formData.location}
- Livestock Type: ${formData.livestockType}
- Number of Animals: ${formData.animalCount}
- Housing Type: ${formData.housingType}
- Feed Source: ${formData.feedSource}
- Budget: ${formData.budget}
- Experience Level: ${formData.experience}
- Water Source: ${formData.waterSource}
- Veterinary Access: ${formData.veterinaryAccess}
- Market Access: ${formData.marketAccess}
- Breeding Plan: ${formData.breedingPlan}
- Current Animals: ${formData.currentAnimals}
- Land Available: ${formData.landAvailable}
- Goals: ${formData.goals}

AI RECOMMENDATIONS:
${aiResponse}

---
Generated by FarmConnect AI Planning System`;

      await FileSystem.writeAsStringAsync(fileUri, content);
      await Sharing.shareAsync(fileUri);
    } catch (error) {
      console.error("Error downloading plan:", error);
      Alert.alert("Error", "Failed to download plan. Please try again.");
    }
  };

  const sendToGovernment = async () => {
    if (!aiResponse) return;
    
    Alert.alert(
      "Send to Government",
      "This feature will send your livestock plan to relevant government officers. Would you like to proceed?",
      [
        { text: "Cancel", style: "cancel" },
        { text: "Send", onPress: async () => {
          try {
            Alert.alert("Success", "Your livestock farming plan has been prepared for sending to government officers. Please contact your local livestock development office to submit this plan.");
          } catch (error) {
            console.error("Error sending email:", error);
            Alert.alert("Error", "Failed to send plan. Please try again or contact your local livestock development office directly.");
          }
        }}
      ]
    );
  };

  const InputField = ({ 
    label, 
    field, 
    placeholder, 
    required = false, 
    multiline = false 
  }: { 
    label: string; 
    field: keyof LivestockFormData; 
    placeholder: string; 
    required?: boolean; 
    multiline?: boolean; 
  }) => (
    <View style={styles.inputContainer}>
      <Text style={styles.label}>
        {label} {required && <Text style={styles.required}>*</Text>}
      </Text>
      <TextInput
        style={[styles.input, multiline && styles.multilineInput]}
        placeholder={placeholder}
        value={formData[field]}
        onChangeText={(value) => handleInputChange(field, value)}
        multiline={multiline}
        numberOfLines={multiline ? 3 : 1}
      />
    </View>
  );

  return (
    <View style={styles.container}>
      <AppHeader 
        title="Livestock Planning" 
        showBackButton={true}
      />
      
      <ScrollView 
        style={styles.scrollView}
        contentContainerStyle={styles.scrollContent}
      >
        <Text style={styles.title}>Livestock Farming Plan</Text>
        <Text style={styles.subtitle}>
          Fill out the details below to get personalized livestock farming recommendations
        </Text>

        <InputField 
          label="Farm Size" 
          field="farmSize" 
          placeholder="e.g., 5 acres, 2 hectares" 
          required 
        />
        
        <InputField 
          label="Location" 
          field="location" 
          placeholder="e.g., Dhaka, Bangladesh" 
          required 
        />
        
        <InputField 
          label="Livestock Type" 
          field="livestockType" 
          placeholder="e.g., Cattle, Goats, Poultry, Buffalo" 
          required 
        />
        
        <InputField 
          label="Number of Animals" 
          field="animalCount" 
          placeholder="e.g., 10 cows, 50 chickens, 20 goats" 
          required 
        />
        
        <InputField 
          label="Budget" 
          field="budget" 
          placeholder="e.g., 100,000 BDT, Low budget, High investment" 
          required 
        />
        
        <InputField 
          label="Housing Type" 
          field="housingType" 
          placeholder="e.g., Open shed, Closed barn, Free range" 
        />
        
        <InputField 
          label="Feed Source" 
          field="feedSource" 
          placeholder="e.g., Grass, Commercial feed, Mixed feeding" 
        />
        
        <InputField 
          label="Experience Level" 
          field="experience" 
          placeholder="e.g., Beginner, Intermediate, Expert" 
        />
        
        <InputField 
          label="Water Source" 
          field="waterSource" 
          placeholder="e.g., Tube well, Pond, Municipal supply" 
        />
        
        <InputField 
          label="Veterinary Access" 
          field="veterinaryAccess" 
          placeholder="e.g., Local vet available, Government clinic, Private clinic" 
        />
        
        <InputField 
          label="Market Access" 
          field="marketAccess" 
          placeholder="e.g., Local market, Dairy collection center, Direct selling" 
        />
        
        <InputField 
          label="Breeding Plan" 
          field="breedingPlan" 
          placeholder="e.g., Natural breeding, Artificial insemination, Crossbreeding" 
        />
        
        <InputField 
          label="Current Animals" 
          field="currentAnimals" 
          placeholder="e.g., 5 cows, Starting fresh, Mixed livestock" 
        />
        
        <InputField 
          label="Land Available" 
          field="landAvailable" 
          placeholder="e.g., Grazing land, Shed only, Mixed use" 
        />
        
        <InputField 
          label="Goals & Objectives" 
          field="goals" 
          placeholder="e.g., Milk production, Meat production, Breeding, Mixed farming" 
          multiline 
        />

        <PrimaryButton
          title={loading ? "Generating Plan..." : "Generate AI Plan"}
          onPress={handleSubmit}
          disabled={loading}
          style={styles.submitButton}
        />

        {aiResponse && (
          <View style={styles.responseContainer}>
            <Text style={styles.responseTitle}>AI Recommendations</Text>
            <Text style={styles.responseText}>{aiResponse}</Text>
            
            <View style={styles.actionButtons}>
              <PrimaryButton
                title="Download Plan"
                onPress={downloadPlan}
                style={styles.actionButton}
              />
              <PrimaryButton
                title="Send to Government"
                onPress={sendToGovernment}
                style={styles.secondaryButton}
              />
            </View>
          </View>
        )}
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.background,
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    padding: 16,
    paddingBottom: 32,
  },
  title: {
    fontSize: 24,
    fontWeight: "700",
    marginBottom: 8,
    color: COLORS.textPrimary,
    textAlign: "center",
  },
  subtitle: {
    fontSize: 16,
    color: COLORS.textSecondary,
    textAlign: "center",
    marginBottom: 24,
    lineHeight: 22,
  },
  inputContainer: {
    marginBottom: 16,
  },
  label: {
    fontSize: 16,
    fontWeight: "600",
    color: COLORS.textPrimary,
    marginBottom: 8,
  },
  required: {
    color: COLORS.error,
  },
  input: {
    backgroundColor: COLORS.inputBackground,
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    color: COLORS.textPrimary,
    borderWidth: 1,
    borderColor: COLORS.border,
  },
  multilineInput: {
    height: 80,
    textAlignVertical: "top",
  },
  submitButton: {
    marginTop: 24,
    marginBottom: 16,
  },
  responseContainer: {
    backgroundColor: COLORS.cardBackground,
    borderRadius: 12,
    padding: 16,
    marginTop: 16,
    borderWidth: 1,
    borderColor: COLORS.border,
  },
  responseTitle: {
    fontSize: 18,
    fontWeight: "600",
    color: COLORS.textPrimary,
    marginBottom: 12,
  },
  responseText: {
    fontSize: 14,
    color: COLORS.textSecondary,
    lineHeight: 20,
    marginBottom: 16,
  },
  actionButtons: {
    flexDirection: "row",
    justifyContent: "space-between",
    gap: 12,
  },
  actionButton: {
    flex: 1,
  },
  secondaryButton: {
    flex: 1,
    backgroundColor: COLORS.secondary,
  },
});
