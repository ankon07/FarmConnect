import React, { useState } from "react";
import { StyleSheet, Text, View, ScrollView, TextInput, Alert } from "react-native";
import { useRouter } from "expo-router";
import AppHeader from "@/components/common/AppHeader";
import PrimaryButton from "@/components/common/PrimaryButton";
import { COLORS } from "@/constants/colors";
import { generateFarmingPlan } from "@/services/geminiApi";
import * as FileSystem from "expo-file-system";
import * as Sharing from "expo-sharing";

interface CropFormData {
  farmSize: string;
  soilType: string;
  cropType: string;
  season: string;
  weatherCondition: string;
  waterSource: string;
  budget: string;
  experience: string;
  location: string;
  previousCrop: string;
  fertilizers: string;
  pesticides: string;
  laborAvailability: string;
  marketAccess: string;
  goals: string;
}

export default function CropPlanning() {
  const router = useRouter();
  const [formData, setFormData] = useState<CropFormData>({
    farmSize: "",
    soilType: "",
    cropType: "",
    season: "",
    weatherCondition: "",
    waterSource: "",
    budget: "",
    experience: "",
    location: "",
    previousCrop: "",
    fertilizers: "",
    pesticides: "",
    laborAvailability: "",
    marketAccess: "",
    goals: "",
  });
  const [loading, setLoading] = useState(false);
  const [aiResponse, setAiResponse] = useState<string>("");

  const handleInputChange = (field: keyof CropFormData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleSubmit = async () => {
    // Validate required fields
    const requiredFields = ['farmSize', 'soilType', 'cropType', 'season', 'location'];
    const missingFields = requiredFields.filter(field => !formData[field as keyof CropFormData]);
    
    if (missingFields.length > 0) {
      Alert.alert("Missing Information", "Please fill in all required fields marked with *");
      return;
    }

    setLoading(true);
    try {
      const response = await generateFarmingPlan("crop", formData);
      setAiResponse(response);
    } catch (error) {
      console.error("Error generating plan:", error);
      Alert.alert("Error", "Failed to generate farming plan. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  const downloadPlan = async () => {
    if (!aiResponse) return;

    try {
      const fileName = `crop_plan_${new Date().toISOString().split('T')[0]}.txt`;
      const fileUri = FileSystem.documentDirectory + fileName;
      
      const content = `CROP FARMING PLAN
Generated on: ${new Date().toLocaleDateString()}

FARM DETAILS:
- Farm Size: ${formData.farmSize}
- Location: ${formData.location}
- Soil Type: ${formData.soilType}
- Crop Type: ${formData.cropType}
- Season: ${formData.season}
- Weather Condition: ${formData.weatherCondition}
- Water Source: ${formData.waterSource}
- Budget: ${formData.budget}
- Experience Level: ${formData.experience}
- Previous Crop: ${formData.previousCrop}
- Fertilizers Available: ${formData.fertilizers}
- Pesticides Available: ${formData.pesticides}
- Labor Availability: ${formData.laborAvailability}
- Market Access: ${formData.marketAccess}
- Goals: ${formData.goals}

AI RECOMMENDATIONS:
${aiResponse}

---
Generated by FarmConnect AI Planning System`;

      await FileSystem.writeAsStringAsync(fileUri, content);
      await Sharing.shareAsync(fileUri);
    } catch (error) {
      console.error("Error downloading plan:", error);
      Alert.alert("Error", "Failed to download plan. Please try again.");
    }
  };

  const sendToGovernment = async () => {
    if (!aiResponse) return;
    
    Alert.alert(
      "Send to Government",
      "This feature will send your farming plan to relevant government officers. Would you like to proceed?",
      [
        { text: "Cancel", style: "cancel" },
        { text: "Send", onPress: async () => {
          try {
            // Email content
            const emailSubject = `Crop Farming Plan - ${formData.location} - ${new Date().toLocaleDateString()}`;
            const emailContent = `Dear Government Agricultural Officer,

I am submitting my crop farming plan for your review and guidance. Please find the details below:

FARM DETAILS:
- Farm Size: ${formData.farmSize}
- Location: ${formData.location}
- Soil Type: ${formData.soilType}
- Crop Type: ${formData.cropType}
- Season: ${formData.season}
- Weather Condition: ${formData.weatherCondition}
- Water Source: ${formData.waterSource}
- Budget: ${formData.budget}
- Experience Level: ${formData.experience}
- Previous Crop: ${formData.previousCrop}
- Fertilizers Available: ${formData.fertilizers}
- Pesticides Available: ${formData.pesticides}
- Labor Availability: ${formData.laborAvailability}
- Market Access: ${formData.marketAccess}
- Goals: ${formData.goals}

AI RECOMMENDATIONS:
${aiResponse}

I would appreciate your expert advice and any additional recommendations you might have.

Thank you for your time and support.

Best regards,
Farmer (via FarmConnect AI Planning System)
Generated on: ${new Date().toLocaleDateString()}`;

            // For now, we'll show a success message
            // In a real implementation, you would integrate with an email service
            Alert.alert("Success", "Your crop farming plan has been prepared for sending to government officers. Please contact your local agricultural office to submit this plan.");
          } catch (error) {
            console.error("Error sending email:", error);
            Alert.alert("Error", "Failed to send plan. Please try again or contact your local agricultural office directly.");
          }
        }}
      ]
    );
  };

  const InputField = ({ 
    label, 
    field, 
    placeholder, 
    required = false, 
    multiline = false 
  }: { 
    label: string; 
    field: keyof CropFormData; 
    placeholder: string; 
    required?: boolean; 
    multiline?: boolean; 
  }) => (
    <View style={styles.inputContainer}>
      <Text style={styles.label}>
        {label} {required && <Text style={styles.required}>*</Text>}
      </Text>
      <TextInput
        style={[styles.input, multiline && styles.multilineInput]}
        placeholder={placeholder}
        value={formData[field]}
        onChangeText={(value) => handleInputChange(field, value)}
        multiline={multiline}
        numberOfLines={multiline ? 3 : 1}
      />
    </View>
  );

  return (
    <View style={styles.container}>
      <AppHeader 
        title="Crop Planning" 
        showBackButton={true}
      />
      
      <ScrollView 
        style={styles.scrollView}
        contentContainerStyle={styles.scrollContent}
      >
        <Text style={styles.title}>Crop Farming Plan</Text>
        <Text style={styles.subtitle}>
          Fill out the details below to get personalized crop farming recommendations
        </Text>

        <InputField 
          label="Farm Size" 
          field="farmSize" 
          placeholder="e.g., 5 acres, 2 hectares" 
          required 
        />
        
        <InputField 
          label="Location" 
          field="location" 
          placeholder="e.g., Dhaka, Bangladesh" 
          required 
        />
        
        <InputField 
          label="Soil Type" 
          field="soilType" 
          placeholder="e.g., Clay, Sandy, Loamy" 
          required 
        />
        
        <InputField 
          label="Crop Type" 
          field="cropType" 
          placeholder="e.g., Rice, Wheat, Vegetables" 
          required 
        />
        
        <InputField 
          label="Season" 
          field="season" 
          placeholder="e.g., Kharif, Rabi, Summer" 
          required 
        />
        
        <InputField 
          label="Weather Condition" 
          field="weatherCondition" 
          placeholder="e.g., Monsoon, Dry, Moderate rainfall" 
        />
        
        <InputField 
          label="Water Source" 
          field="waterSource" 
          placeholder="e.g., Irrigation, Rainwater, Tube well" 
        />
        
        <InputField 
          label="Budget" 
          field="budget" 
          placeholder="e.g., 50,000 BDT, Low budget, High investment" 
        />
        
        <InputField 
          label="Experience Level" 
          field="experience" 
          placeholder="e.g., Beginner, Intermediate, Expert" 
        />
        
        <InputField 
          label="Previous Crop" 
          field="previousCrop" 
          placeholder="e.g., Rice, Fallow land, Vegetables" 
        />
        
        <InputField 
          label="Available Fertilizers" 
          field="fertilizers" 
          placeholder="e.g., Urea, DAP, Organic compost" 
        />
        
        <InputField 
          label="Available Pesticides" 
          field="pesticides" 
          placeholder="e.g., Organic, Chemical, None" 
        />
        
        <InputField 
          label="Labor Availability" 
          field="laborAvailability" 
          placeholder="e.g., Family labor, Hired workers, Limited" 
        />
        
        <InputField 
          label="Market Access" 
          field="marketAccess" 
          placeholder="e.g., Local market, Export, Direct selling" 
        />
        
        <InputField 
          label="Goals & Objectives" 
          field="goals" 
          placeholder="e.g., Maximum yield, Organic farming, Profit maximization" 
          multiline 
        />

        <PrimaryButton
          title={loading ? "Generating Plan..." : "Generate AI Plan"}
          onPress={handleSubmit}
          disabled={loading}
          style={styles.submitButton}
        />

        {aiResponse && (
          <View style={styles.responseContainer}>
            <Text style={styles.responseTitle}>AI Recommendations</Text>
            <Text style={styles.responseText}>{aiResponse}</Text>
            
            <View style={styles.actionButtons}>
              <PrimaryButton
                title="Download Plan"
                onPress={downloadPlan}
                style={styles.actionButton}
              />
              <PrimaryButton
                title="Send to Government"
                onPress={sendToGovernment}
                style={styles.secondaryButton}
              />
            </View>
          </View>
        )}
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.background,
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    padding: 16,
    paddingBottom: 32,
  },
  title: {
    fontSize: 24,
    fontWeight: "700",
    marginBottom: 8,
    color: COLORS.textPrimary,
    textAlign: "center",
  },
  subtitle: {
    fontSize: 16,
    color: COLORS.textSecondary,
    textAlign: "center",
    marginBottom: 24,
    lineHeight: 22,
  },
  inputContainer: {
    marginBottom: 16,
  },
  label: {
    fontSize: 16,
    fontWeight: "600",
    color: COLORS.textPrimary,
    marginBottom: 8,
  },
  required: {
    color: COLORS.error,
  },
  input: {
    backgroundColor: COLORS.inputBackground,
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    color: COLORS.textPrimary,
    borderWidth: 1,
    borderColor: COLORS.border,
  },
  multilineInput: {
    height: 80,
    textAlignVertical: "top",
  },
  submitButton: {
    marginTop: 24,
    marginBottom: 16,
  },
  responseContainer: {
    backgroundColor: COLORS.cardBackground,
    borderRadius: 12,
    padding: 16,
    marginTop: 16,
    borderWidth: 1,
    borderColor: COLORS.border,
  },
  responseTitle: {
    fontSize: 18,
    fontWeight: "600",
    color: COLORS.textPrimary,
    marginBottom: 12,
  },
  responseText: {
    fontSize: 14,
    color: COLORS.textSecondary,
    lineHeight: 20,
    marginBottom: 16,
  },
  actionButtons: {
    flexDirection: "row",
    justifyContent: "space-between",
    gap: 12,
  },
  actionButton: {
    flex: 1,
  },
  secondaryButton: {
    flex: 1,
    backgroundColor: COLORS.secondary,
  },
});
